server.port=8086

server.servlet.context-path=/sharding
spring.shardingsphere.datasource.names=ds0,ds1,ds2,ds3,ds4,ds5,ds6,ds7,ds8,ds9

# 数据源 主库
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp?characterEncoding=utf-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root@dev

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp1?characterEncoding=utf-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root@dev

spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp2?characterEncoding=utf-8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=root@dev

spring.shardingsphere.datasource.ds3.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds3.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds3.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp3?characterEncoding=utf-8
spring.shardingsphere.datasource.ds3.username=root
spring.shardingsphere.datasource.ds3.password=root@dev

spring.shardingsphere.datasource.ds4.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds4.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds4.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp4?characterEncoding=utf-8
spring.shardingsphere.datasource.ds4.username=root
spring.shardingsphere.datasource.ds4.password=root@dev

spring.shardingsphere.datasource.ds5.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds5.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds5.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp5?characterEncoding=utf-8
spring.shardingsphere.datasource.ds5.username=root
spring.shardingsphere.datasource.ds5.password=root@dev

spring.shardingsphere.datasource.ds6.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds6.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds6.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp6?characterEncoding=utf-8
spring.shardingsphere.datasource.ds6.username=root
spring.shardingsphere.datasource.ds6.password=root@dev

spring.shardingsphere.datasource.ds7.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds7.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds7.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp7?characterEncoding=utf-8
spring.shardingsphere.datasource.ds7.username=root
spring.shardingsphere.datasource.ds7.password=root@dev

spring.shardingsphere.datasource.ds8.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds8.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds8.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp8?characterEncoding=utf-8
spring.shardingsphere.datasource.ds8.username=root
spring.shardingsphere.datasource.ds8.password=root@dev

spring.shardingsphere.datasource.ds9.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds9.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds9.jdbc-url=jdbc:mysql://10.2.2.168:3306/test_zp9?characterEncoding=utf-8
spring.shardingsphere.datasource.ds9.username=root
spring.shardingsphere.datasource.ds9.password=root@dev


#默认数据源
spring.shardingsphere.sharding.default-data-source-name=ds0


#mailbox 单独分库
spring.shardingsphere.sharding.tables.mail_box_test.database-strategy.inline.sharding-column=org_id
spring.shardingsphere.sharding.tables.mail_box_test.database-strategy.inline.algorithm-expression=ds$->{org_id % 10}
##根据年龄分库
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=business_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{business_id % 4}

spring.shardingsphere.sharding.tables.t_order_des.database-strategy.inline.sharding-column=business_id
spring.shardingsphere.sharding.tables.t_order_des.database-strategy.inline.algorithm-expression=ds$->{business_id % 4}


#数据分表规则
#指定所需分的表
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..3}.t_order_$->{0..7}
#指定主键
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=user_id
#分表规则为主键除以3取模∂
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{user_id % 8}

# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column = id
spring.shardingsphere.sharding.tables.t_order.key-generator.type = LEFTSNOWFLAKE
#spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=123


#数据分表规则
#指定所需分的表
spring.shardingsphere.sharding.tables.t_order_des.actual-data-nodes=ds$->{0..3}.t_order_des_$->{0..7}
#指定主键
spring.shardingsphere.sharding.tables.t_order_des.table-strategy.inline.sharding-column=user_id
#分表规则为主键除以3取模
spring.shardingsphere.sharding.tables.t_order_des.table-strategy.inline.algorithm-expression=t_order_des_$->{user_id % 8}

spring.shardingsphere.sharding.binding-tables[0]=t_order,t_order_des

# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_order_des.key-generator.column = id
spring.shardingsphere.sharding.tables.t_order_des.key-generator.type = LEFTSNOWFLAKE



#数据分表规则
#指定所需分的表
spring.shardingsphere.sharding.tables.mail_box_test.actual-data-nodes=ds$->{0..9}.mail_box_test_$->{0..49}
#指定主键
spring.shardingsphere.sharding.tables.mail_box_test.table-strategy.inline.sharding-column=user_id
#分表规则为主键除以3取模
spring.shardingsphere.sharding.tables.mail_box_test.table-strategy.inline.algorithm-expression=mail_box_test_$->{user_id % 49}
# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.mail_box_test.key-generator.column = id
spring.shardingsphere.sharding.tables.mail_box_test.key-generator.type = LEFTSNOWFLAKE


# 最大容忍的时钟回拨毫秒数（默认为0）
spring.shardingsphere.sharding.tables.t_order.key-generator.max.tolerate.time.difference.milliseconds=5

#打印sql
spring.shardingsphere.props.sql.show=true




spring.application.name=dome_shardingsphere
#================== consul 服务发现与注册中心配置 =======================#
spring.main.allow-bean-definition-overriding=true

# 指定consul的地址（如：http://consul.imgsky.com.cn）
spring.cloud.consul.host = 10.2.2.87
# 指定consul的端口 == 默认8500
spring.cloud.consul.port = 8500

#指定服务的实例id（唯一）
spring.cloud.consul.discovery.instance-id=${spring.application.name}-dev
# 指定服务的 consul service name
spring.cloud.consul.discovery.service-name=${spring.application.name}
# 是否启用服务发现
spring.cloud.consul.discovery.enabled=true

# 是否启用服务注册
spring.cloud.consul.discovery.register=true
# 是否服务停止时s取消注册
spring.cloud.consul.discovery.deregister=true
# 在注册时使用 consul IP, 而不是 hostname
spring.cloud.consul.discovery.prefer-ip-address=true

# 健康检查url
spring.cloud.consul.discovery.health-check-path= ${server.servlet.context-path}/status/health
# 健康检查的频率, 默认 10 秒
spring.cloud.consul.discovery.health-check-interval=10s
# 健康检查失败多长时间后，取消注册
spring.cloud.consul.discovery.health-check-critical-timeout=500s